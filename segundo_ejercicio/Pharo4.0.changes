'From Pharo4.0 of 18 March 2013 [Latest update: #40607] on 14 April 2015 at 9:52:49.547808 am'!----STARTUP----2015-04-14T09:52:16.024237+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:52:53.433201+02:00 Pharo-40607.image priorSource: 0!----STARTUP----2015-04-14T09:53:10.503839+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:53:23.786467+02:00 Pharo-40607.image priorSource: 196!----STARTUP----2015-04-14T12:27:52.175891+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/14/2015 12:25' prior: 55184883!commentForCurrentUpdate ^ 'new .sources'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/14/2015 12:25'!script608	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-StephaneDucasse.35.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-StephaneDucasse.1091.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/14/2015 12:25'!update40608	"self new update40608"	self withUpdateLog: 'new .sources'.	self loadTogether: self script608 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40607!ScriptLoader removeSelector: #script607!"ScriptLoader40"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.786.mcz') load.ScriptLoader new update40608.!----End fileIn----!----QUIT----2015-04-14T12:27:53.326572+02:00 Pharo.image priorSource: 376!----STARTUP----2015-04-14T12:27:53.4798+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-14T12:27:57.217802+02:00 Pharo.image priorSource: 15532!----STARTUP----2015-04-14T12:42:49.686617+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-14T12:42:49.754863+02:00 Pharo-40608.image priorSource: 15722!----STARTUP----2015-04-15T17:06:01.522135+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 4/15/2015 17:02' prior: 33555098!commentForCurrentUpdate ^ '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 4/15/2015 17:02'!script609	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 4/15/2015 17:02'!update40609	"self new update40609"	Smalltalk allClasses do: [ :each | each class organization comment: nil; commentStamp: nil ].	self withUpdateLog: '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'.	self loadTogether: self script609 merge: false.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 4.0=========Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 4.0 already comes pre-loaded with a rich set of packages that you can use to explore the system and develop your own applications. However there is also a huge library of user contributed projects that you can also load using the ''Configurations Browser'' by executing:"MetacelloConfigurationBrowser open."This browser is also accessible from the World | Tools menu (just click the desktop, select Tools, and then Configuration Browser).You can find information about Pharo on http://www.pharo.org. Some useful starting points are:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 1600 issues treated in this release. Sumarized issues for 4.0:=========================New stuff---------- GTools (Playground, Inspector, Spotter)- Slots model instance variables as first class enities and enable meta-programming on this level.- ShoreLine reporter: submit information automatically when errors happen- TxModel, a modern text model who works with Athens (Preview)- OSWindow, a new way to handle windows and input events (Preview)- Glamour, a mature declarative browser builder- Dark themeUpdated stuff-------------- Zinc/Zodiac- Fuel- VersionnerAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo40ChangeLogs.md"'	label: 'Welcome to Pharo 4.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 4.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40608!ScriptLoader removeSelector: #script608!"ScriptLoader40"!!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 55982943!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !!SystemSystemSettings class methodsFor: 'settings' stamp: 'EstebanLorenzano 4/15/2015 15:03' prior: 58207175!systemSettingOn: aBuilder	<systemsettings>	(aBuilder group: #pharoSystem) 		label: 'System';		description: 'General system settings' ;		with: [			(aBuilder setting: #serverMode)				label: 'Server mode';				target: WorldState;				description: 'If enabled, then each main rendering loop will always wait a complete delay of 50ms' .			(aBuilder setting: #useLocale)				label: 'Use locale';				target: Locale;				selector: #activated;				description: 'Use the system locale to set the system language at startup.']! !!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 33587555!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !SmalltalkImage removeSelector: #shouldDownloadSourcesFile!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile:!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile!"Settings-System"!"System-Support"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-EstebanLorenzano.789.mcz') load.ScriptLoader new update40609.!----End fileIn----!----QUIT----2015-04-15T17:06:04.321261+02:00 Pharo.image priorSource: 15916!----STARTUP----2015-04-15T17:06:04.475077+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-15T17:06:08.61668+02:00 Pharo.image priorSource: 36763!----STARTUP----2015-04-16T19:09:05.732308-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 20:37'!repeated 	^self select: [ :each | self count: [:x | each = x ]  > 1 ].! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 20:38' prior: 33591649!repeated 	^self select: [ :each | (self count: [:x | each = x ] )   > 1 ].! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 20:41' prior: 33591816!repeated 	^self asSet select: [ :each | (self count: [:x | each = x ] )   > 1 ].! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 20:52'!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key put: value. 		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:04' prior: 33592148!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [(d at: key) add: value ] ifAbsent: [ d put: (Collection new value)]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:04' prior: 33592405!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [(d at: key) add: value ] ifAbsent: [ d at: key put: (Collection new value)]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:05' prior: 33592732!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [(d at: key) add: value ] ifAbsent: [ d at: key put: ({ value } )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:06' prior: 33593067!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [(d at: key) add: value ] ifAbsent: [ (d at: key) put: ({ value } )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:06' prior: 33593392!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [(d at: key) add: value ] ifAbsent: [ d at: key put: ({ value } )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:07' prior: 33593719!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:collec | collec add: value ] ifAbsent: [ d at: key put: ({ value } )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:07' prior: 33594044!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:collec | collec add: value ] ifAbsent: [ d at: key put: (Collection new add: value )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:08' prior: 33594374!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:collec | collec add: value ] ifAbsent: [ d at: key put: ((Collection new) add: value )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:08' prior: 33594720!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:collec | collec add: value ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:09' prior: 33595068!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifAbsent: [ d at: key put: ((Collection new) add: value )]  .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:09' prior: 33595358!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifAbsent: [ d at: key put: { value } ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:09' prior: 33595664!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: { value } ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:14' prior: 33595951!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (SequenceableCollection new add: value) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:15' prior: 33596277!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Collection with: value) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:16' prior: 33596633!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: ((Bag new) add: value) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:17' prior: 33596974!groupBy: aBlock	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:26' prior: 33597313!groupBy: aBlock	"Returns a Dictionary where each key is the result of evaluating the elements of self. Each key has as value a Bag with all the elements that, when evaluating the block parameter with them as values, you obtain that key"		| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:32' prior: 33597653!groupBy: aBlock	"Returns a Dictionary where each key is the result of evaluating the elements of self. And the value of each key is a Bag with all the self elements that the result of evulating the block is the key"	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:36'!select: as  groupBy: aBlock	^self asSet select: [ :each | (self count: [:x | each = x ] )   > 1 ].! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:38' prior: 33598742!select: aCondition groupBy: aBlock2	^self asSet select: [ :each | (self count: [:x | each = x ] )   > 1 ].! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:38' prior: 33598217!groupBy: aCondition	"Returns a Dictionary where each key is the result of evaluating the elements of self. And the value of each key is a Bag with all the self elements that the result of evulating the block is the key"	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aCondition value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:39' prior: 33598937!select: conditionOfSelecting groupBy: conditionOfGrouping	^self select: conditionOfSelecting groupBy: conditionOfGrouping.! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:41' prior: 33599140!groupBy: groupId	"Returns a Dictionary where each key is the result of evaluating the elements of self. And the value of each key is a Bag with all the self elements that the result of evulating the block is the key"	| d key value |	d := Dictionary new.	self do: [ :each | 		key := groupId value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:42' prior: 33599908!groupBy: aBlock	"Returns a Dictionary where each key is the result of evaluating the elements of self. And the value of each key is a Bag with all the self elements that the result of evulating the block is the key"	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:array| array add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:42' prior: 33600451!groupBy: aBlock	"Returns a Dictionary where each key is the result of evaluating the elements of self. And the value of each key is a Bag with all the self elements that the result of evulating the block is the key"	| d key value |	d := Dictionary new.	self do: [ :each | 		key := aBlock value: each.		value := each.		d at: key ifPresent: [:bag| bag add: value ] ifAbsent: [ d at: key put: (Bag newFrom: {value} ) ]   .		].	^ d			! !!Collection methodsFor: 'enumerating' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:43'!select: aSelectCondition thenGroupBy: aBlock	^self select: aSelectCondition groupBy: aBlock.! !TestCase subclass: #TestsSegundoEjercicio	instanceVariableNames: ''	classVariableNames: ''	category: 'Poo-segundoEjercicio'!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:46'!testRepeated ! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:49' prior: 33601834!testRepeated  | collec | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated empty )		 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:49' prior: 33601961!testRepeated  | collec | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty )		 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:51' prior: 33602446!testRepeated  | collec result | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	result := { 3 }	self assert: (collec repeated isNotEmpty).	self assert: (collec repeated = result )	"	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		"			 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:51' prior: 33602933!testRepeated  | collec result | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	result := { 3 }.	self assert: (collec repeated isNotEmpty).	self assert: (collec repeated = result )	"	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		"			 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:51' prior: 33603737!testRepeated  | collec result | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	result := { 3 }.	self assert: (collec repeated isNotEmpty).	self assert: (collec repeated = result ).	"	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		"			 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:51' prior: 33604542!testRepeated  | collec result | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	result := { 3 }.	self assert: (collec repeated isNotEmpty).	"self assert: (collec repeated = result )."	"	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		"			 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:52' prior: 33605348!testRepeated  | collec result | 	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	result := { 3 }.	self assert: (collec repeated isNotEmpty).	self assert: (collec repeated = result ).	"	collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		collec := { 1 . 2 . 3 . 4 . 5  }.	self assert: (collec repeated isEmpty ).		"			 "testReferencedClasses	self debug: #testReferencedClasses	| refs |	refs := Metaclass referencedClasses.	self assert: (refs includes: SystemAnnouncer).		refs := self class referencedClasses.	self assert: (refs includesAllOf: {SystemAnnouncer . Metaclass})"! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:56' prior: 33606156!testRepeated  | collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:57' prior: 33606962!testRepeated  | collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).	! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:57' prior: 33607444!testRepeated  | collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := {  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'Pablo Artuso - Gonzalo LeraRomero 4/16/2015 21:57' prior: 33608083!testRepeated  | collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		! !----QUIT----2015-04-16T21:59:19.482308-03:00 Pharo4.0.image priorSource: 36957!----STARTUP----2015-04-16T22:00:29.711739-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!"Poo-segundoEjercicio"!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/16/2015 22:04'!repeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !TestsSegundoEjercicio removeSelector: #repeated!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/16/2015 22:05' prior: 33608864!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !"Poo-segundoEjercicio"!----QUIT----2015-04-16T22:05:45.96174-03:00 Pharo4.0.image priorSource: 54964!----STARTUP----2015-04-17T18:18:19.315168-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:20' prior: 33611278!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:20' prior: 33611991!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: {}.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:21' prior: 33612649!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3. 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	expectedResult := Set newFrom: {}.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:22' prior: 33613304!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	actualResult.	expectedResult := Set newFrom: {3}.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:22' prior: 33613958!testRepeated	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	actualResult.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:23'!testGroupBy: aBlock 	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	actualResult.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:23'!testGroupBy	| collec actualResult expectedResult | 	collec := { 1 . 2 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { }.	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	actualResult.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !TestsSegundoEjercicio removeSelector: #testGroupBy:!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:37' prior: 33615951!testGroupBy	| collec aBlock actualResult expectedResult | 		collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.	expectedResult := Dictionary new at:1 put: ((Bag new) add: 2).	self assert: (expectedResult = actualResult).		collec := { 1 . 2 . 3 . 3 . 4 . 5  }.	actualResult := collec repeated.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).		collec := { 3 . 3 . 3 . 3 . 3  }.	actualResult := collec repeated.	actualResult.	expectedResult := Set newFrom: { 3 }.	self assert: (expectedResult = actualResult).! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:39' prior: 33616677!testGroupBy	| temp_array collec aBlock actualResult expectedResult | 		collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.	temp_array := { 2 . 1 . 4 . 3 . 6 . 5 . 8 . 7}.	expectedResult := Dictionary newFromPairs: temp_array.	self assert: (expectedResult = actualResult).		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:39' prior: 33617418!testGroupBy	| temp_array collec aBlock actualResult expectedResult | 		collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.	temp_array := { 2 . 1 . 3 . 2 . 4 . 3 . 5 . 4 . 6 . 5}.	expectedResult := Dictionary newFromPairs: temp_array.	expectedResult .	self assert: (expectedResult = actualResult).		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:42' prior: 33617881!testGroupBy	| temp_array collec aBlock actualResult expectedResult | 		collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.	temp_array := { 2 . ((Bag new)add: 1) . 3 . 2 . 4 . 3 . 5 . 4 . 6 . 5}.	expectedResult := Dictionary newFromPairs: temp_array.	expectedResult  	self assert: (expectedResult = actualResult).		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:53' prior: 33618370!testGroupBy	| b1 b2 b3 b4 b5 temp_array collec aBlock actualResult expectedResult | 		collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.		b1 := Bag withAll: { 1 }.	b2 := Bag withAll: { 2 }.	b3 := Bag withAll: { 3 }.	b4 := Bag withAll: { 4 }.	b5 := Bag withAll: { 5 }.							temp_array := { 2 . b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5}.	expectedResult := Dictionary newFromPairs: temp_array.	expectedResult.	self assert: (expectedResult = actualResult).		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/17/2015 18:53' prior: 33618875!testGroupBy	| b1 b2 b3 b4 b5 temp_array collec aBlock actualResult expectedResult | 	    "First tests"	collec := { 1 . 2 . 3 . 4 . 5  }.	aBlock := [ :x | x + 1 ].	actualResult := collec groupBy: aBlock.		b1 := Bag withAll: { 1 }.	b2 := Bag withAll: { 2 }.	b3 := Bag withAll: { 3 }.	b4 := Bag withAll: { 4 }.	b5 := Bag withAll: { 5 }.							temp_array := { 2 . b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5}.	expectedResult := Dictionary newFromPairs: temp_array.	expectedResult.	self assert: (expectedResult = actualResult).		! !----SNAPSHOT----2015-04-17T18:54:03.995188-03:00 Pharo4.0.image priorSource: 57242!----QUIT----2015-04-17T18:59:55.537173-03:00 Pharo4.0.image priorSource: 65642!----STARTUP----2015-04-19T13:45:29.411727-03:00 as /home/partu/Documentos/Facultad/Materias/Programación Orientada A Objetos/pharo4.0/shared/Pharo4.0.image!----QUIT/NOSAVE----2015-04-19T13:47:59.995743-03:00 Pharo4.0.image priorSource: 65642!----STARTUP----2015-04-19T13:48:02.787777-03:00 as /home/partu/Documentos/Facultad/Materias/Programación Orientada A Objetos/pharo4.0/shared/Pharo4.0.image!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:48' prior: 33619530!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := {1 . 2 . 3 . 4 . 5 }.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.					^ self! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:48' prior: 33614629!testRepeated	| array_helper actualValue expectedValue |		"No repeated items"	array_helper := {1 . 2 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {}.	self assert: expectedValue = actualValue.		"Just one repeated"	array_helper := {1 . 2 . 3 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.				"Just one repeated but the only one in the array."	array_helper := {3. 3 . 3 . 3 . 3}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.			"All repeated."	array_helper := { 1 . 1 . 2 . 2 . 3 . 3 . 4 . 4 . 5 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {1 . 2 . 3 . 4 . 5}.	self assert: expectedValue = actualValue.		! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:48' prior: 33620777!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := {1 . 2 . 3 . 4 . 5 }.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.			! !----STARTUP----2015-04-19T13:50:43.134056-03:00 as /home/partu/Documentos/Facultad/Materias/Programación Orientada A Objetos/pharo4.0/shared/Pharo4.0.image!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:51' prior: 33614629!testRepeated	| array_helper actualValue expectedValue |		"No repeated items"	array_helper := {1 . 2 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {}.	self assert: expectedValue = actualValue.		"Just one repeated"	array_helper := {1 . 2 . 3 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.				"Just one repeated but the only one in the array."	array_helper := {3. 3 . 3 . 3 . 3}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.			"All repeated."	array_helper := { 1 . 1 . 2 . 2 . 3 . 3 . 4 . 4 . 5 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {1 . 2 . 3 . 4 . 5}.	self assert: expectedValue = actualValue.		^ self	! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:51' prior: 33619530!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := {1 . 2 . 3 . 4 . 5 }.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.					^ self! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:51' prior: 33625769!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := {1 . 2 . 3 . 4 . 5 }.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:51' prior: 33624781!testRepeated	| array_helper actualValue expectedValue |		"No repeated items"	array_helper := {1 . 2 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {}.	self assert: expectedValue = actualValue.		"Just one repeated"	array_helper := {1 . 2 . 3 . 3 . 4 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.				"Just one repeated but the only one in the array."	array_helper := {3. 3 . 3 . 3 . 3}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.			"All repeated."	array_helper := { 1 . 1 . 2 . 2 . 3 . 3 . 4 . 4 . 5 . 5}.	actualValue := array_helper repeated.	expectedValue := Set newFrom: {1 . 2 . 3 . 4 . 5}.	self assert: expectedValue = actualValue.	! !----SNAPSHOT----2015-04-19T13:51:34.004122-03:00 Pharo4.0.image priorSource: 65642!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:54' prior: 33627206!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := Collection with:1 with:2 with:3 with:4 with:5.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 13:56' prior: 33629691!testGroupBy	| array_helper cond_block actualValue b1 b2 b3 b4 b5 expectedValue |		"Each key is the value + 1 "		"Actual value"			array_helper := {1 . 2 . 3 . 4 . 5 }.			cond_block := [ :t11 | t11 + 1 ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {1}.			b2 := Bag withAll: {2}.			b3 := Bag withAll: {3}.			b4 := Bag withAll: {4}.			b5 := Bag withAll: {5}.			array_helper := {2. b1 . 3 . b2 . 4 . b3 . 5 . b4 . 6 . b5 }.			expectedValue := Dictionary newFromPairs: array_helper.							self assert: actualValue = expectedValue.			"Each key is the size of the values!! (we are testing the part of multiple and repetaed values too) "		"Actual value"			array_helper := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.			cond_block := [ :t11 | t11 size ].			actualValue := array_helper groupBy: cond_block.					"Expected value"				b1 := Bag withAll: {#de . #mi . #vo . #so . #la . #de . #mi}.			b2 := Bag withAll: {#vida}.			b3 := Bag withAll: {#river}.			b4 := Bag withAll: {#corazo . #legria}.			array_helper := {2. b1 . 4 . b2 . 5 . b3 . 6 . b4 }.			expectedValue := Dictionary newFromPairs: array_helper.						expectedValue. 				self assert: actualValue = expectedValue.! !----STARTUP----2015-04-19T14:01:10.384128-03:00 as /home/partu/Documentos/Facultad/Materias/Programación Orientada A Objetos/pharo4.0/shared/Pharo4.0.image!----QUIT/NOSAVE----2015-04-19T14:02:05.202143-03:00 Pharo4.0.image priorSource: 75045!----STARTUP----2015-04-19T22:03:41.052159-03:00 as /Users/gleraromero/Documents/CS/POO/Talleres/segundo_ejercicio/Pharo4.0.image!----QUIT/NOSAVE----2015-04-19T22:06:56.807557-03:00 Pharo4.0.image priorSource: 75045!----STARTUP----2015-04-19T22:07:18.173844-03:00 as /Users/gleraromero/Documents/CS/POO/Talleres/segundo_ejercicio/Pharo4.0.image!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 4/19/2015 22:07' prior: 51150071!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!Collection methodsFor: 'enumerating' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:08' prior: 33600992!groupBy: groupingBlock	| groups elemGroup |	groups := Dictionary new.	self		do: [ :elem | 			elemGroup := groupingBlock value: elem.			groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ].	^ groups.! !Collection removeSelector: #select:groupBy:!!Collection methodsFor: 'enumerating' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:09' prior: 33601513!select: selectionCondition thenGroupBy: groupingBlock	^(self select: selectionCondition) groupBy: groupingBlock.		"Alternativa eficiente."	"| isElemSelected elemGroup |	self inject: Dictionary new into: [ :groups :elem |			isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ].			groups.		 ]."! !!Collection methodsFor: 'enumerating' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:10' prior: 33591987!repeated	^ self asSet select: [ :elem | (self count: [ :each | elem = each ]) > 1 ].! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:11'!testSelectThenGroupBy	| input selectingCondition groupingBlock actualResult expectedResult |		input := { }.	selectingCondition := [ :elem | elem > 10 ].	groupingBlock := [ :elem | elem ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	self assert: actualResult = expectedResult.		input := { 1. 2. 13. 54. 3. 5. 7. }.	selectingCondition := [ :elem | elem < 10 ].	groupingBlock := [ :elem | elem odd ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	expectedResult at: true put: (Bag newFrom: { 1. 3. 5. 7 }).	expectedResult at: false put: (Bag newFrom: { 2 }).	self assert: actualResult = expectedResult.! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:20' prior: 33627206!testGroupBy	| input groupingBlock actualValue expectedValue |		"Each key is the value + 1 "	input := {1 . 2 . 3 . 4 . 5 }.	groupingBlock := [ :elem | elem + 1 ].		actualValue := input groupBy: groupingBlock.	expectedValue := Dictionary new.	expectedValue at: 2 put: (Bag newFrom: {1}).	expectedValue at: 3 put: (Bag newFrom: {2}).	expectedValue at: 4 put: (Bag newFrom: {3}).	expectedValue at: 5 put: (Bag newFrom: {4}).	expectedValue at: 6 put: (Bag newFrom: {5}).	self assert: actualValue = expectedValue.			"Each key is the size of the values. (Testing multiple and repeated values by group.)"	input := {#river . #de . #mi . #vida  . #vo . #so . #la . #legria . #de . #mi . #corazo }.	groupingBlock := [ :t11 | t11 size ].	actualValue := input groupBy: groupingBlock.	expectedValue := Dictionary new.	expectedValue at: 2 put: (Bag newFrom: {#de. #mi. #vo. #so. #la. #de. #mi}).	expectedValue at: 4 put: (Bag newFrom: {#vida}).	expectedValue at: 5 put: (Bag newFrom: {#river}).	expectedValue at: 6 put: (Bag newFrom: {#corazo. #legria}).		self assert: actualValue = expectedValue.! !----SNAPSHOT----2015-04-19T22:20:54.846993-03:00 Pharo4.0.image priorSource: 75045!!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:21' prior: 33628628!testRepeated	| input actualValue expectedValue |		"No repeated items"	input := {1 . 2 . 3 . 4 . 5}.	actualValue := input repeated.	expectedValue := Set newFrom: {}.	self assert: expectedValue = actualValue.		"Just one repeated"	input := {1 . 2 . 3 . 3 . 4 . 5}.	actualValue := input repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.				"Just one repeated but the only one in the array."	input := {3. 3 . 3 . 3 . 3}.	actualValue := input repeated.	expectedValue := Set newFrom: {3}.	self assert: expectedValue = actualValue.			"All repeated."	input := { 1 . 1 . 2 . 2 . 3 . 3 . 4 . 4 . 5 . 5}.	actualValue := input repeated.	expectedValue := Set newFrom: {1 . 2 . 3 . 4 . 5}.	self assert: expectedValue = actualValue.	! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:22' prior: 33634010!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	self inject: Dictionary new into: [ :groups :elem |			isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ].			groups.		 ].! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:23' prior: 33634828!testSelectThenGroupBy	| input selectingCondition groupingBlock actualResult expectedResult |		input := { }.	selectingCondition := [ :elem | elem > 10 ].	groupingBlock := [ :elem | elem ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	"self assert: actualResult = expectedResult."		input := { 1. 2. 13. 54. 3. 5. 7. }.	selectingCondition := [ :elem | elem < 10 ].	groupingBlock := [ :elem | elem odd ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	expectedResult at: true put: (Bag newFrom: { 1. 3. 5. 7 }).	expectedResult at: false put: (Bag newFrom: { 2 }).	self assert: actualResult = expectedResult.! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:23' prior: 33638486!testSelectThenGroupBy	| input selectingCondition groupingBlock actualResult expectedResult |		input := { }.	selectingCondition := [ :elem | elem > 10 ].	groupingBlock := [ :elem | elem ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	self assert: actualResult = expectedResult.		input := { 1. 2. 13. 54. 3. 5. 7. }.	selectingCondition := [ :elem | elem < 10 ].	groupingBlock := [ :elem | elem odd ].	actualResult := input select: selectingCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	expectedResult at: true put: (Bag newFrom: { 1. 3. 5. 7 }).	expectedResult at: false put: (Bag newFrom: { 2 }).	self assert: actualResult = expectedResult.! !----SNAPSHOT----2015-04-19T22:24:13.946571-03:00 Pharo4.0.image priorSource: 82388!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 4/19/2015 22:24' prior: 33633137!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:26' prior: 33637940!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	self inject: Dictionary new into: [ :groups :elem |			"isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ]."			groups.		 ].! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:31' prior: 33640751!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	Transcript show: 'hola'.	self inject: Dictionary new into: [ :groups :elem |			"isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ]."			groups.		 ].! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:33' prior: 33641290!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	Transcript show: (self inject: Dictionary new into: [:g :e | g]).	self inject: Dictionary new into: [ :groups :elem |			"isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ]."			groups.		 ].! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:33' prior: 33641855!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	Transcript show: (self inject: Dictionary new into: [:g :e | g]).	^ self inject: Dictionary new into: [ :groups :elem |			"isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ]."			groups.		 ].! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:34' prior: 33642461!select: selectionCondition thenGroupBy: groupingBlock	| isElemSelected elemGroup |	^self inject: Dictionary new into: [ :groups :elem |			isElemSelected := selectionCondition value: elem.			isElemSelected ifTrue: [				elemGroup := groupingBlock value: elem.				groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ] ].			groups.		 ].! !!Collection methodsFor: '*Poo-segundoEjercicio' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:35' prior: 33633568!groupBy: groupingBlock	|  elemGroup |	^self inject: Dictionary new into: [ :groups :elem |			elemGroup := groupingBlock value: elem.			groups at: elemGroup ifPresent: [ :groupBag | groupBag add: elem ] ifAbsent: [ groups at: elemGroup put: (Bag newFrom: {elem}) ].			groups.		 ].! !!TestsSegundoEjercicio methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/19/2015 22:35' prior: 33639368!testSelectThenGroupBy	| input selectionCondition groupingBlock actualResult expectedResult |		input := { }.	selectionCondition := [ :elem | elem > 10 ].	groupingBlock := [ :elem | elem ].	actualResult := input select: selectionCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	self assert: actualResult = expectedResult.		input := { 1. 2. 13. 54. 3. 5. 7. }.	selectionCondition := [ :elem | elem < 10 ].	groupingBlock := [ :elem | elem odd ].	actualResult := input select: selectionCondition thenGroupBy: groupingBlock.	expectedResult := Dictionary new.	expectedResult at: true put: (Bag newFrom: { 1. 3. 5. 7 }).	expectedResult at: false put: (Bag newFrom: { 2 }).	self assert: actualResult = expectedResult.! !----SNAPSHOT----2015-04-19T22:36:06.540174-03:00 Pharo4.0.image priorSource: 85687!----QUIT/NOSAVE----2015-04-19T22:36:09.961537-03:00 Pharo4.0.image priorSource: 90343!